// Code generated by protoc-gen-go.
// source: pajbot.proto
// DO NOT EDIT!

/*
Package pajbot is a generated protocol buffer package.

It is generated from these files:
	pajbot.proto

It has these top-level messages:
	RawIRCMessage
	EmotesMessage
	Empty
*/
package pajbot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RawIRCMessage struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *RawIRCMessage) Reset()                    { *m = RawIRCMessage{} }
func (m *RawIRCMessage) String() string            { return proto.CompactTextString(m) }
func (*RawIRCMessage) ProtoMessage()               {}
func (*RawIRCMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RawIRCMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type EmotesMessage struct {
	TwitchEmotes []*EmotesMessage_TwitchEmote `protobuf:"bytes,1,rep,name=twitchEmotes" json:"twitchEmotes,omitempty"`
	BttvEmotes   []*EmotesMessage_BTTVEmote   `protobuf:"bytes,2,rep,name=bttvEmotes" json:"bttvEmotes,omitempty"`
}

func (m *EmotesMessage) Reset()                    { *m = EmotesMessage{} }
func (m *EmotesMessage) String() string            { return proto.CompactTextString(m) }
func (*EmotesMessage) ProtoMessage()               {}
func (*EmotesMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EmotesMessage) GetTwitchEmotes() []*EmotesMessage_TwitchEmote {
	if m != nil {
		return m.TwitchEmotes
	}
	return nil
}

func (m *EmotesMessage) GetBttvEmotes() []*EmotesMessage_BTTVEmote {
	if m != nil {
		return m.BttvEmotes
	}
	return nil
}

type EmotesMessage_TwitchEmote struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Count uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *EmotesMessage_TwitchEmote) Reset()                    { *m = EmotesMessage_TwitchEmote{} }
func (m *EmotesMessage_TwitchEmote) String() string            { return proto.CompactTextString(m) }
func (*EmotesMessage_TwitchEmote) ProtoMessage()               {}
func (*EmotesMessage_TwitchEmote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *EmotesMessage_TwitchEmote) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EmotesMessage_TwitchEmote) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EmotesMessage_TwitchEmote) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type EmotesMessage_BTTVEmote struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *EmotesMessage_BTTVEmote) Reset()                    { *m = EmotesMessage_BTTVEmote{} }
func (m *EmotesMessage_BTTVEmote) String() string            { return proto.CompactTextString(m) }
func (*EmotesMessage_BTTVEmote) ProtoMessage()               {}
func (*EmotesMessage_BTTVEmote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *EmotesMessage_BTTVEmote) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *EmotesMessage_BTTVEmote) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*RawIRCMessage)(nil), "pajbot.RawIRCMessage")
	proto.RegisterType((*EmotesMessage)(nil), "pajbot.EmotesMessage")
	proto.RegisterType((*EmotesMessage_TwitchEmote)(nil), "pajbot.EmotesMessage.TwitchEmote")
	proto.RegisterType((*EmotesMessage_BTTVEmote)(nil), "pajbot.EmotesMessage.BTTVEmote")
	proto.RegisterType((*Empty)(nil), "pajbot.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Module service

type ModuleClient interface {
	HandleRawIRCMessage(ctx context.Context, in *RawIRCMessage, opts ...grpc.CallOption) (*Empty, error)
	HandleWhisper(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	HandleEmotes(ctx context.Context, in *EmotesMessage, opts ...grpc.CallOption) (*Empty, error)
}

type moduleClient struct {
	cc *grpc.ClientConn
}

func NewModuleClient(cc *grpc.ClientConn) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) HandleRawIRCMessage(ctx context.Context, in *RawIRCMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pajbot.Module/HandleRawIRCMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) HandleWhisper(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pajbot.Module/HandleWhisper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) HandleEmotes(ctx context.Context, in *EmotesMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pajbot.Module/HandleEmotes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Module service

type ModuleServer interface {
	HandleRawIRCMessage(context.Context, *RawIRCMessage) (*Empty, error)
	HandleWhisper(context.Context, *Empty) (*Empty, error)
	HandleEmotes(context.Context, *EmotesMessage) (*Empty, error)
}

func RegisterModuleServer(s *grpc.Server, srv ModuleServer) {
	s.RegisterService(&_Module_serviceDesc, srv)
}

func _Module_HandleRawIRCMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawIRCMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).HandleRawIRCMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pajbot.Module/HandleRawIRCMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).HandleRawIRCMessage(ctx, req.(*RawIRCMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_HandleWhisper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).HandleWhisper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pajbot.Module/HandleWhisper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).HandleWhisper(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_HandleEmotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmotesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).HandleEmotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pajbot.Module/HandleEmotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).HandleEmotes(ctx, req.(*EmotesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Module_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pajbot.Module",
	HandlerType: (*ModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleRawIRCMessage",
			Handler:    _Module_HandleRawIRCMessage_Handler,
		},
		{
			MethodName: "HandleWhisper",
			Handler:    _Module_HandleWhisper_Handler,
		},
		{
			MethodName: "HandleEmotes",
			Handler:    _Module_HandleEmotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pajbot.proto",
}

func init() { proto.RegisterFile("pajbot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x03, 0xb5, 0x6d, 0x3a, 0x05, 0x0f, 0xa3, 0x4d, 0x08, 0x17, 0x2b, 0xa7, 0x7a, 0x90,
	0x43, 0xeb, 0xcd, 0x83, 0x89, 0x86, 0xa8, 0x87, 0x5e, 0x08, 0xd1, 0xf3, 0x52, 0x36, 0x82, 0x29,
	0x2c, 0x29, 0x53, 0x9b, 0x3e, 0x88, 0x2f, 0xe1, 0x53, 0x1a, 0x77, 0x17, 0xdb, 0x6d, 0xb8, 0xcd,
	0x0c, 0xff, 0xff, 0x0d, 0xf3, 0x67, 0xc1, 0xa9, 0xd9, 0x67, 0x2a, 0x28, 0xac, 0x37, 0x82, 0x04,
	0x0e, 0x54, 0x17, 0xdc, 0x80, 0x1b, 0xb3, 0xdd, 0x6b, 0xfc, 0xb4, 0xe4, 0x4d, 0xc3, 0x3e, 0x38,
	0x7a, 0x30, 0xd4, 0xa5, 0x67, 0x4d, 0xad, 0xd9, 0x28, 0x6e, 0xdb, 0xe0, 0xdb, 0x06, 0x37, 0x2a,
	0x05, 0xf1, 0xa6, 0xd5, 0x46, 0xe0, 0xd0, 0xae, 0xa0, 0x55, 0xae, 0xc6, 0x9e, 0x35, 0xed, 0xcd,
	0xc6, 0xf3, 0xeb, 0x50, 0x6f, 0x32, 0xc4, 0x61, 0x72, 0x50, 0xc6, 0x86, 0x0d, 0x1f, 0x00, 0x52,
	0xa2, 0x2f, 0x0d, 0xb1, 0x25, 0xe4, 0xaa, 0x1b, 0xf2, 0x98, 0x24, 0x6f, 0x0a, 0x71, 0x64, 0xf1,
	0x9f, 0x61, 0x7c, 0x44, 0xc7, 0x73, 0xb0, 0x8b, 0x4c, 0xfe, 0xbd, 0x1b, 0xdb, 0x45, 0x86, 0x08,
	0x67, 0x15, 0x2b, 0xb9, 0x67, 0xcb, 0x7b, 0x64, 0x8d, 0x97, 0xd0, 0x5f, 0x89, 0x6d, 0x45, 0x5e,
	0x4f, 0xca, 0x54, 0xe3, 0x2f, 0x60, 0xf4, 0xbf, 0xe1, 0xcf, 0x96, 0xb3, 0x26, 0xd7, 0x31, 0xc8,
	0xba, 0x0b, 0x15, 0x0c, 0xa1, 0x1f, 0x95, 0x35, 0xed, 0xe7, 0x3f, 0x16, 0x0c, 0x96, 0x22, 0xdb,
	0xae, 0x39, 0xde, 0xc3, 0xc5, 0x0b, 0xab, 0xb2, 0x35, 0x37, 0xc3, 0x9d, 0xb4, 0x57, 0x19, 0x63,
	0xdf, 0x3d, 0x1c, 0x5b, 0xd3, 0x1e, 0x6f, 0xc1, 0x55, 0xe6, 0xf7, 0xbc, 0x68, 0x6a, 0xbe, 0x41,
	0xf3, 0xfb, 0xa9, 0xfc, 0x0e, 0x1c, 0x25, 0xd7, 0x71, 0x4e, 0x3a, 0xa3, 0x3b, 0x71, 0xa5, 0x03,
	0xf9, 0x0e, 0x16, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x75, 0xfb, 0x30, 0x17, 0x02, 0x00,
	0x00,
}
